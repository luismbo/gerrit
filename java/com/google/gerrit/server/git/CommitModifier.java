package com.google.gerrit.server.git;

import com.google.gerrit.extensions.annotations.ExtensionPoint;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectInserter;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;

import java.io.IOException;

/**
 * Plugins implementing this can modify new commits generated by Rebase Always and Cherry-Pick
 * strategies and change its contents.
 *
 * TODO: decide whether this should be called before/after ChangeMessageModifier or whether
 *       it should have a chance to change the commit message as well.
 */
@ExtensionPoint
public interface CommitModifier {

  /**
   * Imlementation must return non-Null tree.
   *
   * <p>mergeTip is guaranteed to have its body parsed.</p>
   *
   * @param inserter
   * @param rw
   * @param mergeTip is the current HEAD of the destination branch, which will be a parent of the
   *                 new commit being generated
   * @param newTree the new commit tree.
   * @param newCommitMessage the new commit message.
   * @return a non-Null tree identity, possibly newTree unchanged.
   */
  ObjectId onSubmit(ObjectInserter inserter, RevWalk rw, RevCommit mergeTip, ObjectId newTree,
                    String newCommitMessage) throws IOException;
}
